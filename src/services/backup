import express from "express";
import multer from "multer";
import cors from "cors";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import fs from "fs";

// ✅ Express app setup
const app = express();
app.use(cors());

// ✅ Multer setup (for file upload)
const upload = multer({ dest: "uploads/" });

// ✅ IDrive e2 credentials and setup
const s3Client = new S3Client({
  region: "us-west-2", // your region
  endpoint: "https://s3.us-west-2.idrivee2.com", // your endpoint
  credentials: {
    accessKeyId: "mcow5b8vtsERvGQfVjGr", // paste your access key
    secretAccessKey: "FTaJNPFvMPJGzN4vin1BMHuFzbThTIdPvzhYxBHe", // paste your secret key
  },
});

const bucketName = "irthadvisors"; // your bucket name

// ✅ Upload route
app.post("/upload-pdf", upload.single("pdf"), async (req, res) => {
  try {
    const file = req.file;
    if (!file) return res.status(400).json({ error: "No file uploaded" });

    // Create readable stream from temp file
    const fileStream = fs.createReadStream(file.path);

    // Unique file name in bucket
    const fileKey = `pdfs/${Date.now()}_${file.originalname}`;

    // Upload parameters
    const uploadParams = {
      Bucket: bucketName,
      Key: fileKey,
      Body: fileStream,
      ContentType: "application/pdf",
    };

    // Upload to IDrive e2 (S3 compatible)
    await s3Client.send(new PutObjectCommand(uploadParams));

    // Delete local temp file after upload
    fs.unlinkSync(file.path);

    // Public file URL
    const fileUrl = `https://s3.us-west-2.idrivee2.com/${bucketName}/${fileKey}`;

    res.json({ success: true, url: fileUrl });
  } catch (error) {
    console.error("❌ Error uploading PDF:", error);
    res.status(500).json({ error: "Upload failed", details: error.message });
  }
});

// ✅ Start server
const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));


//////////////////////////////
// src/utils/idriveUpload.js
export const uploadPDFToIDrive = async (file) => {
  try {
    const formData = new FormData();
    formData.append("pdf", file);

    const response = await fetch("http://localhost:5000/upload-pdf", {
      method: "POST",
      body: formData,
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || "Failed to upload PDF");
    }

    return data.url; // ✅ This URL will be from IDrive e2
  } catch (error) {
    console.error("❌ Error uploading PDF:", error);
    throw error;
  }
};


///////////////////
// src/services/insights.js
import {
  getFirestore,
  collection,
  getDocs,
  doc,
  addDoc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
} from "firebase/firestore";
import { firebaseApp } from "./firebaseConfig";

const firestore = getFirestore(firebaseApp);
const insightsCollection = collection(firestore, "insights");

// helper to create slug (stores in doc but doc id remains auto)
const createSlug = (text = "") =>
  text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9\s-]/g, "")
    .replace(/\s+/g, "-")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "");

// ✅ Normalize createdAt for old docs
const normalizeCreatedAt = (data) => {
  if (!data.createdAt) return { seconds: 0, nanoseconds: 0 };
  return data.createdAt;
};

// ✅ Get all insights
export const getInsights = async () => {
  const snapshot = await getDocs(insightsCollection);
  return snapshot.docs
    .map((docSnap) => {
      const d = docSnap.data();
      return {
        id: docSnap.id,
        title: d.title || "",
        time: d.time || "",
        category: d.category || "",
        label: d.label || "",
        slug: d.slug || createSlug(d.title || ""),
        image: d.image || "",
        pdfs: d.pdfs || [], // ✅ include PDFs
        content: d.content || d.description || "",
        link: d.link || "",
        reference: d.reference || "",
        createdAt: normalizeCreatedAt(d),
      };
    })
    .sort((a, b) => b.createdAt.seconds - a.createdAt.seconds);
};

// ✅ Add new insight
export const addInsight = async (data) => {
  const payload = {
    ...data,
    slug: data.slug || (data.title ? createSlug(data.title) : ""),
    createdAt: serverTimestamp(),
  };

  Object.keys(payload).forEach(
    (k) => payload[k] === undefined && delete payload[k]
  );

  const ref = await addDoc(insightsCollection, payload);
  return ref.id;
};

// ✅ Update insight
export const updateInsight = async (id, data) => {
  const docRef = doc(firestore, "insights", id);
  const payload = {
    ...data,
    updatedAt: serverTimestamp(),
  };

  if (payload.title && !payload.slug) payload.slug = createSlug(payload.title);

  Object.keys(payload).forEach(
    (k) => payload[k] === undefined && delete payload[k]
  );

  await updateDoc(docRef, payload);
  return id;
};

// ✅ Delete insight
export const deleteInsight = async (id) => {
  const docRef = doc(firestore, "insights", id);
  await deleteDoc(docRef);
  return id;
};

/////////////////////////////////
// src/pages/admin/Insights.jsx
import React, { useEffect, useState } from "react";
import DataTable from "../components/admin/DataTable";
import ConfirmModal from "../components/admin/ConfirmModal";
import FormModal from "../components/admin/FormModal";
import Filter from "../components/admin/Filter";
import LoadingSpinner from "../components/admin/LoadingSpinner";
import {
  getInsights,
  addInsight,
  updateInsight,
  deleteInsight,
} from "./insights";
import { uploadImageToCloudinary } from "./cloudinary";
import { uploadPDFToIDrive } from "../utils/idriveUpload";

export default function Insights() {
  const [insights, setInsights] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [loading, setLoading] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [selectedInsight, setSelectedInsight] = useState(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isConfirmOpen, setIsConfirmOpen] = useState(false);
  const [formData, setFormData] = useState({});
  const [selectedCategory, setSelectedCategory] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const data = await getInsights();
      setInsights(data);
      setFiltered(data);
    } catch (err) {
      console.error("Failed to load insights:", err);
      alert("Failed to load insights.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!selectedCategory) setFiltered(insights);
    else setFiltered(insights.filter((i) => i.category === selectedCategory));
  }, [selectedCategory, insights]);

  const handleDelete = async () => {
    if (!selectedInsight) return;
    setProcessing(true);
    try {
      await deleteInsight(selectedInsight.id);
      setIsConfirmOpen(false);
      setSelectedInsight(null);
      fetchData();
    } catch (err) {
      console.error("Delete failed:", err);
      alert("Failed to delete insight.");
    } finally {
      setProcessing(false);
    }
  };

  const handleSave = async () => {
    setProcessing(true);
    try {
      const payload = { ...formData };

      // --- Upload image ---
      if (formData.image instanceof File) {
        const url = await uploadImageToCloudinary(formData.image);
        payload.image = url;
      } else if (selectedInsight && typeof payload.image === "string") {
        payload.image = selectedInsight.image;
      }

      // --- Upload PDFs ---
      let newPDFUrls = [];
      let existingPDFUrls = [];

      if (Array.isArray(formData.pdfs)) {
        const newFiles = formData.pdfs.filter((p) => p instanceof File);
        existingPDFUrls = formData.pdfs.filter((p) => typeof p === "string");

        if (newFiles.length > 0) {
          newPDFUrls = await Promise.all(
            newFiles.map(async (file) => {
              const fileName = `${Date.now()}_${file.name}`;
              const url = await uploadPDFToIDrive(file, fileName);
              return url;
            })
          );
        }
      }

      payload.pdfs = [...(existingPDFUrls || []), ...(newPDFUrls || [])];

      // --- Validation ---
      if (!selectedInsight && !payload.image) {
        alert("Please upload an image for the insight.");
        setProcessing(false);
        return;
      }

      // --- Save to Firestore ---
      if (selectedInsight) {
        await updateInsight(selectedInsight.id, payload);
      } else {
        await addInsight(payload); // slug generated automatically in services
      }

      // --- Reset ---
      setIsFormOpen(false);
      setSelectedInsight(null);
      setFormData({});
      fetchData();
    } catch (err) {
      console.error("Save failed:", err);
      alert(err.message || "Failed to save insight.");
    } finally {
      setProcessing(false);
    }
  };

  const headers = [
    { key: "image", label: "Image" },
    { key: "title", label: "Title" },
    { key: "category", label: "Category" },
    { key: "time", label: "Time" },
    { key: "label", label: "Label" },
    { key: "actions", label: "Actions" },
  ];

  const renderCell = (header, row) => {
    if (header.key === "image") {
      return row.image ? (
        <img
          src={row.image}
          alt={row.title}
          className="w-16 h-16 object-cover rounded"
        />
      ) : (
        <div className="w-16 h-16 bg-gray-100 rounded flex items-center justify-center text-xs text-gray-500">
          No image
        </div>
      );
    }

    if (header.key === "actions") {
      return (
        <div className="flex gap-2">
          <button
            className="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
            onClick={() => {
              setSelectedInsight(row);
              setFormData({
                title: row.title || "",
                time: row.time || "",
                category: row.category || "",
                label: row.label || "",
                content: row.content || "",
                link: row.link || "",
                reference: row.reference || "",
                image: row.image || "",
                pdfs: row.pdfs || [],
              });
              setIsFormOpen(true);
            }}
          >
            Edit
          </button>
          <button
            className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600"
            onClick={() => {
              setSelectedInsight(row);
              setIsConfirmOpen(true);
            }}
          >
            Delete
          </button>
        </div>
      );
    }

    return row[header.key] || "-";
  };

  const categories = Array.from(
    new Set(insights.map((i) => i.category).filter(Boolean))
  );

  const fields = [
    { name: "title", label: "Title", type: "text", placeholder: "Enter title" },
    { name: "time", label: "Time", type: "date" },
    {
      name: "category",
      label: "Category",
      type: "select",
      options: [
        ...categories.map((c) => ({ label: c, value: c })),
        { label: "Other (Add new category)", value: "other" },
      ],
    },
    { name: "label", label: "Label", type: "text", placeholder: "Short label/tag" },
    { name: "content", label: "Content", type: "textarea", placeholder: "Enter full content or summary", rows: 8 },
    { name: "link", label: "External Link", type: "text", placeholder: "https://..." },
    { name: "reference", label: "Reference", type: "text", placeholder: "Authors / Reference" },
    { name: "image", label: "Upload Image", type: "file" },
    { name: "pdfs", label: "Upload PDFs", type: "file", multiple: true, accept: ".pdf" },
  ];

  return (
    <div className="p-6">
      <LoadingSpinner isVisible={loading} />

      <div className="flex justify-between items-center mb-4">
        <Filter categories={categories} selected={selectedCategory} onSelect={setSelectedCategory} />
        <button
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
          onClick={() => {
            setSelectedInsight(null);
            setFormData({});
            setIsFormOpen(true);
          }}
          disabled={loading}
        >
          + Add Insight
        </button>
      </div>

      <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
        <p className="text-sm text-blue-700">
          <strong>Note:</strong> Images are uploaded to Cloudinary, PDFs to IDrive e2, and all metadata is stored in Firebase Firestore.
        </p>
      </div>

      <DataTable
        headers={headers}
        data={filtered}
        renderCell={renderCell}
        loading={loading}
        emptyMessage="No insights found"
      />

      <ConfirmModal
        isOpen={isConfirmOpen}
        onClose={() => setIsConfirmOpen(false)}
        onConfirm={handleDelete}
        title="Delete Insight"
        message="Are you sure you want to delete"
        itemName={selectedInsight?.title}
        loading={processing}
        confirmText="Delete"
      />

      <FormModal
        isOpen={isFormOpen}
        onClose={() => setIsFormOpen(false)}
        onSave={handleSave}
        title={selectedInsight ? "Edit Insight" : "Add Insight"}
        fields={fields}
        formData={formData}
        setFormData={setFormData}
        loading={processing}
        saveText={selectedInsight ? "Update" : "Save"}
      />
    </div>
  );
}